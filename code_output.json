{
    "code": "from pathlib import Path\nimport os\nfrom jinja2 import Environment, FileSystemLoader\nfrom weasyprint import HTML, CSS\nimport markdown\n\n\n# Function to get user inputs from form data\ndef get_user_inputs(form_data):\n    inputs = {\n        \"project_name\": form_data.get(\"project_name\", \"\"),\n        \"student_name\": form_data.get(\"student_name\", \"\"),\n        \"guide_name\": form_data.get(\"guide_name\", \"\"),\n        \"college_name\": form_data.get(\"college_name\", \"\"),\n        \"college_address\": form_data.get(\"college_address\", \"\"),\n        \"department_name\": form_data.get(\"department_name\", \"\"),\n        \"academic_year\": form_data.get(\"academic_year\", \"\"),\n        \"hod_name\": form_data.get(\"hod_name\", \"\"),  # Standardized variable name\n        \"principal_name\": form_data.get(\"principal_name\", \"\"),\n        \"college_logo\": form_data.get(\"college_logo\", \"\"),  # Placeholder for dynamic base64 logo\n\n        \"abstract\": form_data.get(\"abstract\", \"\"),\n        \"tools_list\": form_data.get(\"tools_list\", []),\n        \"introduction\": form_data.get(\"introduction\", \"\"),\n        \"objectives\": form_data.get(\"objectives\", \"\"),\n        \"scope\": form_data.get(\"scope\", \"\"),\n        \"tools\": form_data.get(\"tools\", \"\"),\n\n        # Methodology Section (Handles Sub-Fields)\n        \"methodology\": {\n            \"development_process\": form_data.get(\"methodology\", {}).get(\"development_process\", \"\"),\n            \"tools_platforms\": form_data.get(\"methodology\", {}).get(\"tools_platforms\", \"\"),\n            \"er_diagram\": form_data.get(\"methodology\", {}).get(\"er_diagram\", None),\n        },\n\n        # Timeline Section (Handles Sub-Fields)\n        \"timeline\": {\n            \"gantt_chart\": form_data.get(\"timeline\", {}).get(\"gantt_chart\", None),\n            \"milestones\": form_data.get(\"timeline\", {}).get(\"milestones\", \"\"),\n        },\n\n        \"resources\": form_data.get(\"resources\", \"\"),\n        \n        # Expected Outcomes (Handles Sub-Fields)\n        \"expected_outcomes\": {\n            \"functional\": form_data.get(\"expected_outcomes\", {}).get(\"functional\", \"\"),\n            \"ui\": form_data.get(\"expected_outcomes\", {}).get(\"ui\", \"\"),\n            \"project_structure\": form_data.get(\"expected_outcomes\", {}).get(\"project_structure\", \"\"),\n            \"source_code\": form_data.get(\"expected_outcomes\", {}).get(\"source_code\", \"\"),\n        },\n\n        \"references\": form_data.get(\"references\", [])\n    }\n    return inputs\n\ndef generate_report_with_toc(data, main_template_path, output_pdf_path, css_path, toc_template_path):\n   \n    try:\n        # 1. Load Templates and Render Main Report\n        template_dir = os.path.dirname(main_template_path)\n        env = Environment(loader=FileSystemLoader(template_dir))\n        env.filters['markdown'] = markdown.markdown\n        main_template = env.get_template(os.path.basename(main_template_path))\n        rendered_main_html = main_template.render(data)\n\n        # 2. Load CSS and Render Main Report to PDF\n        css = CSS(filename=css_path)\n        main_document = HTML(string=rendered_main_html).render(stylesheets=[css])\n\n        # 3. Extract Section Page Numbers\n        section_page_map = _extract_section_pages(main_document, data)\n        # 4. Render Table of ContentsS\n        toc_data = {\n            \"section_pages\": section_page_map,\n            \"tools_list\": data[\"tools_list\"]\n        }\n\n        toc_template = env.get_template(os.path.basename(toc_template_path))\n        rendered_toc_html = toc_template.render(toc_data)\n        toc_document = HTML(string=rendered_toc_html).render(stylesheets=[css])\n\n        # 5. Combine Pages and Save PDF\n        ordered_pages = _reorder_pages_with_toc(main_document.pages, toc_document.pages[0])\n        main_document.copy(ordered_pages).write_pdf(output_pdf_path)\n\n        print(f\"\u2705 Report generated: {output_pdf_path}\")\n\n    except Exception as e:\n        print(f\"\u274c Error generating report: {e}\")\n\n\n\ndef _extract_section_pages(document, data):\n    \n    tracked_sections = {\"introduction\", \"objectives\", \"scope\", \"references\", \"resources\"}\n    section_pages = {}\n    for page_number, page in enumerate(document.pages, start=1):\n        page_text = \" \".join(box.text for box in page._page_box.descendants() if hasattr(box, \"text\"))\n        for section in data:\n            marker = f\"##{section}##\"\n            if marker in page_text:\n                section_pages[section] = page_number + 1\n    return section_pages\n\ndef _reorder_pages_with_toc(main_pages, toc_page):\n   \n    ordered_pages = list(main_pages) #make a copy to avoid changing the original list.\n    ordered_pages.insert(5, toc_page) #insert at the 6th position.\n    return ordered_pages\n\n"
}